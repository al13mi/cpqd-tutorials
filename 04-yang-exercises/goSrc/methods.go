/*
Package tutorial is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/raphael/go/src/github.com/openconfig/ygot/genutil/names.go
using the following YANG input files:
	- demo-port.yang
Imported modules were sourced from:
*/
package tutorial

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)


// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: nil,
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}


// NewPort creates a new entry in the Port list of the
// DemoPort_Ports struct. The keys of the list are populated from the input
// arguments.
func (t *DemoPort_Ports) NewPort(PortNumber uint16) (*DemoPort_Ports_Port, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[uint16]*DemoPort_Ports_Port)
	}

	key := PortNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &DemoPort_Ports_Port{
		PortNumber: &PortNumber,
	}

	return t.Port[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DemoPort_Ports) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DemoPort_Ports"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DemoPort_Ports) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ΛListKeyMap returns the keys of the DemoPort_Ports_Port struct, which is a YANG list entry.
func (t *DemoPort_Ports_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortNumber == nil {
		return nil, fmt.Errorf("nil value for key PortNumber")
	}

	return map[string]interface{}{
		"port-number": *t.PortNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *DemoPort_Ports_Port) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DemoPort_Ports_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DemoPort_Ports_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *DemoPort_Ports_Port_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DemoPort_Ports_Port_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DemoPort_Ports_Port_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *DemoPort_Ports_Port_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["DemoPort_Ports_Port_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *DemoPort_Ports_Port_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


